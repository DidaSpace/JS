// Урок 1. Коллекции и итераторы. Модули
// Формат сдачи: ссылка на репозиторий.

// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
  albums: [
    {
      title: "Название альбома 1",
      artist: "Исполнитель 1",
      year: "1970",
    },
    {
      title: "Название альбома 2",
      artist: "Исполнитель 2",
      year: "1973",
    },
    {
      title: "Название альбома 3",
      artist: "Исполнитель 3",
      year: "1974",
    },
  ],
};

musicCollection[Symbol.iterator] = function () {
  let index = 0;
  const albums = this.albums;
  return {
    next: function () {
      return index < albums.length
        ? { done: false, value: albums[index++] }
        : { done: true };
    },
  };
};

for (let album of musicCollection) {
  console.log(album);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const chefsSpecialties = new Map([
  ["Виктор", "Пицца"],
  ["Ольга", "Суши"],
  ["Дмитрий", "Десерты"],
]);

const dishesAndChefs = new Map([
  ['Пицца "Маргарита"', "Виктор"],
  ['Пицца "Пепперони"', "Виктор"],
  ['Суши "Филадельфия"', "Ольга"],
  ['Суши "Калифорния"', "Ольга"],
  ["Тирамису", "Дмитрий"],
  ["Чизкейк", "Дмитрий"],
]);

const clientOrders = new Map();

const orders = [
  { client: "Aleksey", items: ['Пицца "Пепперони"', "Тирамису"] },
  { client: "Мария", items: ['Суши "Калифорния"', 'Пицца "Маргарита"'] },
  { client: "Ирина", items: ["Чизкейк"] },
];

orders.forEach((order) => {
  const client = order.client;
  const orderItems = order.items;
  const clientOrder = new Map();

  orderItems.forEach((item) => {
    const chef = dishesAndChefs.get(item);
    clientOrder.set(item, chef);
  });
  clientOrders.set({ client: client }, clientOrder);
});

console.log("Список заказов:");
clientOrders.forEach((order, client) => {
  console.log(`${client.client} заказал:`);
  order.forEach((chef, dish) => {
    console.log(`- ${dish} (готовит ${chef})`);
  });
});
